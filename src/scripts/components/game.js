class PonyConstellationGame {    constructor() {        this.canvas = document.getElementById('gameCanvas');        this.ctx = this.canvas.getContext('2d');        this.score = 0;        this.timeLeft = 60;        this.isPlaying = false;        this.stars = [];        this.connections = [];        this.currentLine = null;        this.patterns = [        ];        this.init();    }    init() {        this.canvas.width = 800;        this.canvas.height = 600;        this.canvas.addEventListener('mousedown', this.handleMouseDown.bind(this));        this.canvas.addEventListener('mousemove', this.handleMouseMove.bind(this));        this.canvas.addEventListener('mouseup', this.handleMouseUp.bind(this));        this.startBtn = document.getElementById('startGame');        this.restartBtn = document.getElementById('restartGame');        this.scoreElement = document.getElementById('score');        this.timeElement = document.getElementById('timeLeft');        this.startBtn.addEventListener('click', () => this.startGame());        this.restartBtn.addEventListener('click', () => this.restartGame());        this.drawBackground();    }    startGame() {        this.isPlaying = true;        this.score = 0;        this.timeLeft = 60;        this.stars = [];        this.connections = [];        this.generateStars();        this.startBtn.style.display = 'none';        this.restartBtn.style.display = 'none';        this.gameLoop();        this.startTimer();    }    generateStars() {        const numStars = 15;        for (let i = 0; i < numStars; i++) {            this.stars.push({                x: Math.random() * (this.canvas.width - 40) + 20,                y: Math.random() * (this.canvas.height - 40) + 20,                radius: 3,                glowRadius: 10,                brightness: Math.random() * 0.5 + 0.5            });        }    }    drawBackground() {        const gradient = this.ctx.createLinearGradient(0, 0, 0, this.canvas.height);        gradient.addColorStop(0, '#000000');        gradient.addColorStop(1, '#1a1a2e');        this.ctx.fillStyle = gradient;        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);        for (let i = 0; i < 100; i++) {            const x = Math.random() * this.canvas.width;            const y = Math.random() * this.canvas.height;            const radius = Math.random() * 1;            this.ctx.beginPath();            this.ctx.arc(x, y, radius, 0, Math.PI * 2);            this.ctx.fillStyle = `rgba(255, 255, 255, ${Math.random() * 0.5})`;            this.ctx.fill();        }    }    drawStars() {        this.stars.forEach(star => {            const gradient = this.ctx.createRadialGradient(                star.x, star.y, 0,                star.x, star.y, star.glowRadius            );            gradient.addColorStop(0, `rgba(139, 92, 246, ${star.brightness})`);            gradient.addColorStop(1, 'rgba(139, 92, 246, 0)');            this.ctx.beginPath();            this.ctx.arc(star.x, star.y, star.glowRadius, 0, Math.PI * 2);            this.ctx.fillStyle = gradient;            this.ctx.fill();            this.ctx.beginPath();            this.ctx.arc(star.x, star.y, star.radius, 0, Math.PI * 2);            this.ctx.fillStyle = '#fff';            this.ctx.fill();        });    }    drawConnections() {        this.ctx.strokeStyle = 'rgba(139, 92, 246, 0.5)';        this.ctx.lineWidth = 2;        this.connections.forEach(conn => {            this.ctx.beginPath();            this.ctx.moveTo(conn.start.x, conn.start.y);            this.ctx.lineTo(conn.end.x, conn.end.y);            this.ctx.stroke();        });        if (this.currentLine) {            this.ctx.beginPath();            this.ctx.moveTo(this.currentLine.start.x, this.currentLine.start.y);            this.ctx.lineTo(this.currentLine.end.x, this.currentLine.end.y);            this.ctx.stroke();        }    }    handleMouseDown(e) {        if (!this.isPlaying) return;        const rect = this.canvas.getBoundingClientRect();        const x = e.clientX - rect.left;        const y = e.clientY - rect.top;        const clickedStar = this.stars.find(star =>             Math.hypot(star.x - x, star.y - y) < star.glowRadius        );        if (clickedStar) {            this.currentLine = {                start: clickedStar,                end: { x, y }            };        }    }    handleMouseMove(e) {        if (!this.currentLine) return;        const rect = this.canvas.getBoundingClientRect();        this.currentLine.end.x = e.clientX - rect.left;        this.currentLine.end.y = e.clientY - rect.top;    }    handleMouseUp(e) {        if (!this.currentLine) return;        const rect = this.canvas.getBoundingClientRect();        const x = e.clientX - rect.left;        const y = e.clientY - rect.top;        const endStar = this.stars.find(star =>             Math.hypot(star.x - x, star.y - y) < star.glowRadius        );        if (endStar && endStar !== this.currentLine.start) {            this.connections.push({                start: this.currentLine.start,                end: endStar            });            this.checkPattern();        }        this.currentLine = null;    }    checkPattern() {        this.score += 10;        this.scoreElement.textContent = this.score;    }    startTimer() {        const timer = setInterval(() => {            this.timeLeft--;            this.timeElement.textContent = this.timeLeft;            if (this.timeLeft <= 0) {                clearInterval(timer);                this.endGame();            }        }, 1000);    }    endGame() {        this.isPlaying = false;        this.restartBtn.style.display = 'block';        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);        this.ctx.font = '48px Space Grotesk';        this.ctx.fillStyle = '#fff';        this.ctx.textAlign = 'center';        this.ctx.fillText(`Game Over! Score: ${this.score}`, this.canvas.width/2, this.canvas.height/2);    }    restartGame() {        this.startGame();    }    gameLoop() {        if (!this.isPlaying) return;        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);        this.drawBackground();        this.drawConnections();        this.drawStars();        requestAnimationFrame(() => this.gameLoop());    }}document.addEventListener('DOMContentLoaded', () => {    new PonyConstellationGame();}); 